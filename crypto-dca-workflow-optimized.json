{
  "nodes": [
    {
      "parameters": {},
      "id": "a9a6968d-c094-456f-a258-fc532a9907bb",
      "name": "Daily DCA Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1616,
        -304
      ]
    },
    {
      "parameters": {},
      "id": "868077dc-869f-41df-9359-c4abfd292b44",
      "name": "Monthly Rebalance Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1616,
        112
      ]
    },
    {
      "parameters": {
        "url": "https://api.alternative.me/fng/",
        "options": {
          "timeout": 10000
        }
      },
      "id": "531d4bda-888e-41fc-90ec-e3b87197541b",
      "name": "Get Fear & Greed Index",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -1376,
        -304
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 1000
    },
    {
      "parameters": {
        "url": "https://api.binance.com/api/v3/ticker/price?symbol=BTCEUR",
        "options": {
          "timeout": 10000
        }
      },
      "id": "c63ece3f-0f95-42ba-aade-f2964a55a9b9",
      "name": "Get BTC Price",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -1120,
        -304
      ]
    },
    {
      "parameters": {
        "url": "https://api.binance.com/api/v3/klines?symbol=BTCEUR&interval=1d&limit=20",
        "options": {
          "timeout": 10000
        }
      },
      "id": "c10ffad8-3084-4b86-9ea9-8d13390d40db",
      "name": "Get BTC 20-Day MA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -1120,
        -176
      ]
    },
    {
      "parameters": {
        "url": "https://api.binance.com/api/v3/klines?symbol=BTCEUR&interval=1d&limit=50",
        "options": {
          "timeout": 10000
        }
      },
      "id": "ma50-fetcher-node",
      "name": "Get BTC 50-Day MA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -864,
        -176
      ]
    },
    {
      "parameters": {
        "url": "https://api.binance.com/api/v3/klines?symbol=BTCEUR&interval=1d&limit=200",
        "options": {
          "timeout": 10000
        }
      },
      "id": "ma200-fetcher-node",
      "name": "Get BTC 200-Day MA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -624,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Binance Account Data Fetcher - Exact replica of working bash script\nconst crypto = require('crypto');\n\n// Check environment variables\nif (!$env.BINANCE_API_KEY || !$env.BINANCE_SECRET_KEY) {\n  throw new Error('BINANCE_API_KEY and BINANCE_SECRET_KEY environment variables must be set');\n}\n\n// Set credentials (from environment)\nconst API_KEY = $env.BINANCE_API_KEY;\nconst API_SECRET = $env.BINANCE_SECRET_KEY;\n\n// Generate fresh timestamp (important!)\nconst TIMESTAMP = Date.now();\nconsole.log('Timestamp:', TIMESTAMP);\n\n// Create query string\nconst QUERY = `recvWindow=5000&timestamp=${TIMESTAMP}`;\nconsole.log('Query:', QUERY);\n\n// Generate signature (exact same as bash script)\nconst SIGNATURE = crypto.createHmac('sha256', API_SECRET)\n  .update(QUERY)\n  .digest('hex');\nconsole.log('Signature:', SIGNATURE);\n\n// Construct final URL\nconst finalUrl = `https://api.binance.com/api/v3/account?${QUERY}&signature=${SIGNATURE}`;\nconsole.log('Final URL:', finalUrl);\n\n// Make API call using Node.js built-in https module\nconst https = require('https');\nconst url = require('url');\n\ntry {\n  const parsedUrl = url.parse(finalUrl);\n  \n  // Create promise-based HTTPS request\n  const response = await new Promise((resolve, reject) => {\n    const options = {\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      method: 'GET',\n      headers: {\n        'X-MBX-APIKEY': API_KEY,\n        'Content-Type': 'application/json'\n      },\n      timeout: 10000\n    };\n    \n    const req = https.request(options, (res) => {\n      let data = '';\n      \n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const jsonData = JSON.parse(data);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            resolve(jsonData);\n          } else {\n            reject(new Error(`HTTP ${res.statusCode}: ${JSON.stringify(jsonData)}`));\n          }\n        } catch (parseError) {\n          reject(new Error(`Failed to parse response: ${data}`));\n        }\n      });\n    });\n    \n    req.on('error', (error) => {\n      reject(error);\n    });\n    \n    req.on('timeout', () => {\n      req.destroy();\n      reject(new Error('Request timeout'));\n    });\n    \n    req.end();\n  });\n  \n  console.log('✅ Binance API Success!');\n  console.log('Account data received:', JSON.stringify(response, null, 2));\n  \n  return [{\n    json: response\n  }];\n  \n} catch (error) {\n  console.error('❌ Binance API Error:', error.message);\n  throw error;\n}"
      },
      "id": "8a5b9686-1aa9-48eb-abb4-1863e5368087",
      "name": "Get Binance Account Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "// OPTIMIZED EUR-based Risk Management Configuration with Bull Market Optimization\nconst OPTIMIZED_RISK_CONFIG = {\n  PORTFOLIO: {\n    TARGET_BTC_ALLOCATION: 0.75,     // 75% BTC target\n    REBALANCE_BAND: 0.05,            // ±5% rebalancing threshold\n    SATELLITE_POOL_PERCENTAGE: 0.3,  // 30% for active DCA\n  },\n  DCA: {\n    MAX_TRADES_PER_WEEK: 3,          // Maximum satellite trades per week\n    SLIPPAGE_TOLERANCE: 0.01,        // 1% maximum slippage\n    MIN_BTC_BALANCE: 0.01,           // Minimum BTC to maintain\n    MIN_EUR_BALANCE: 5,              // Minimum EUR to maintain\n  },\n  CIRCUIT_BREAKERS: {\n    MAX_PORTFOLIO_DECLINE_7D: -0.20, // Stop if portfolio down >20% in 7 days\n    MAX_BTC_DECLINE_24H: -0.10,      // Stop if BTC down >10% in 24 hours\n  },\n  // ENHANCED: Optimized Fear & Greed Rules with Trend Filters\n  OPTIMIZED_FEAR_GREED_RULES: {\n    EXTREME_FEAR: { \n      RANGE: [0, 20], \n      PERCENTAGE: 7.5, \n      DESCRIPTION: 'Extreme Fear - Aggressive Buy',\n      TREND_FILTER: 'NONE' // Always buy on extreme fear\n    },\n    FEAR: { \n      RANGE: [21, 30], \n      PERCENTAGE: 4, \n      DESCRIPTION: 'Fear - Moderate Buy',\n      TREND_FILTER: 'NONE' // Always buy on fear\n    },\n    NEUTRAL: { \n      RANGE: [31, 60], \n      PERCENTAGE: 1, \n      DESCRIPTION: 'Neutral - DCA if below MA20',\n      TREND_FILTER: 'PRICE_BELOW_MA20' // Existing logic\n    },\n    GREED: { \n      RANGE: [61, 70], \n      PERCENTAGE: 4, \n      DESCRIPTION: 'Greed - Small Sell',\n      TREND_FILTER: 'WEAK_TREND' // NEW: Only sell if trend weak\n    },\n    HIGH_GREED: { \n      RANGE: [71, 80], \n      PERCENTAGE: 7.5, // Reduced from 30%\n      DESCRIPTION: 'High Greed - Moderate Sell',\n      TREND_FILTER: 'STRONG_WEAKNESS' // NEW: Require stronger weakness\n    },\n    EXTREME_GREED: { \n      RANGE: [81, 100], \n      PERCENTAGE: 10, \n      DESCRIPTION: 'Extreme Greed - Aggressive Sell',\n      TREND_FILTER: 'CONFIRMED_REVERSAL' // NEW: Only on confirmed reversal\n    }\n  },\n  // NEW: Market Regime Detection Parameters\n  MARKET_REGIME: {\n    BULL_MARKET_THRESHOLDS: {\n      PRICE_ABOVE_MA50: true,\n      MA50_ABOVE_MA200: true,\n      THIRTY_DAY_RETURN: 20 // > 20% return required\n    },\n    BEAR_MARKET_THRESHOLDS: {\n      PRICE_BELOW_MA50: true,\n      MA50_BELOW_MA200: true,\n      THIRTY_DAY_RETURN: -20 // < -20% return required\n    }\n  },\n  // NEW: Trend Filter Criteria\n  TREND_FILTERS: {\n    WEAK_TREND: {\n      // Sell on greed only if trend is weakening\n      CONDITIONS: ['PRICE_BELOW_MA20', 'NEGATIVE_7DAY_RETURN']\n    },\n    STRONG_WEAKNESS: {\n      // Sell on high greed only with stronger weakness signals\n      CONDITIONS: ['PRICE_BELOW_MA50', 'RETURN_30DAY_BELOW_10PCT']\n    },\n    CONFIRMED_REVERSAL: {\n      // Sell on extreme greed only with confirmed reversal\n      CONDITIONS: ['NEGATIVE_7DAY_RETURN_GT_5PCT', 'PRICE_BELOW_MA20']\n    }\n  }\n};\n\n// NEW: Market Regime Detection Function\nfunction detectMarketRegime(btcPrice, ma50, ma200, btc30DayReturn) {\n  const config = OPTIMIZED_RISK_CONFIG.MARKET_REGIME;\n  \n  if (btcPrice > ma50 && \n      ma50 > ma200 && \n      btc30DayReturn > config.BULL_MARKET_THRESHOLDS.THIRTY_DAY_RETURN) {\n    return 'BULL_MARKET';\n  } else if (btcPrice < ma50 && \n             ma50 < ma200 && \n             btc30DayReturn < config.BEAR_MARKET_THRESHOLDS.THIRTY_DAY_RETURN) {\n    return 'BEAR_MARKET';\n  } else {\n    return 'NEUTRAL';\n  }\n}\n\n// NEW: Trend Filter Evaluation Function\nfunction evaluateTrendFilter(filterType, btcPrice, ma20, ma50, btc7DayReturn, btc30DayReturn) {\n  const filters = OPTIMIZED_RISK_CONFIG.TREND_FILTERS[filterType];\n  if (!filters) return false;\n  \n  const conditions = {\n    'PRICE_BELOW_MA20': btcPrice < ma20,\n    'PRICE_BELOW_MA50': btcPrice < ma50,\n    'NEGATIVE_7DAY_RETURN': btc7DayReturn < 0,\n    'NEGATIVE_7DAY_RETURN_GT_5PCT': btc7DayReturn < -5,\n    'RETURN_30DAY_BELOW_10PCT': btc30DayReturn < 10\n  };\n  \n  // At least one condition must be true to allow selling\n  return filters.CONDITIONS.some(condition => conditions[condition]);\n}\n\n// NEW: Enhanced Moving Average Calculation\nfunction calculateMA(candleData, period) {\n  const closes = candleData.slice(-period).map(candle => parseFloat(candle[4]));\n  return closes.reduce((sum, close) => sum + close, 0) / closes.length;\n}\n\n// Main Optimized DCA Logic with Bull Market Enhancement\nconst fearGreedData = $node[\"Get Fear & Greed Index\"].json;\nconst btcPriceData = $node[\"Get BTC Price\"].json;\nconst ma20Data = $node[\"Get BTC 20-Day MA\"].json;\nconst ma50Data = $node[\"Get BTC 50-Day MA\"].json;  // NEW\nconst ma200Data = $node[\"Get BTC 200-Day MA\"].json;  // NEW\nconst balanceData = $node[\"Get Binance Account Data\"].json;\n\n// Parse Fear & Greed Index\nconst fearGreedIndex = parseInt(fearGreedData.data[0].value);\nconst fearGreedValue = fearGreedData.data[0].value_classification;\n\n// Parse BTC Price (now in EUR)\nconst btcPrice = parseFloat(btcPriceData.price);\n\n// Calculate all moving averages\nconst ma20 = calculateMA(ma20Data, 20);\nconst ma50 = calculateMA(ma50Data, 50);  // NEW\nconst ma200 = calculateMA(ma200Data, 200);  // NEW\n\n// NEW: Calculate momentum indicators\nconst btcPrice7DaysAgo = $workflow.static?.data?.btcPrice7DaysAgo || btcPrice;\nconst btcPrice30DaysAgo = $workflow.static?.data?.btcPrice30DaysAgo || btcPrice;\n\nconst btc7DayReturn = ((btcPrice - btcPrice7DaysAgo) / btcPrice7DaysAgo) * 100;\nconst btc30DayReturn = ((btcPrice - btcPrice30DaysAgo) / btcPrice30DaysAgo) * 100;\n\n// NEW: Detect market regime\nconst marketRegime = detectMarketRegime(btcPrice, ma50, ma200, btc30DayReturn);\n\n// NEW: Track all-time high for trailing stop logic\nconst previousATH = $workflow.static?.data?.allTimeHigh || btcPrice;\nconst currentATH = Math.max(previousATH, btcPrice);\nconst pullbackFromATH = ((currentATH - btcPrice) / currentATH) * 100;\n\n// Parse Portfolio Balances (Spot API format) - Updated for EUR\nconst btcBalance = parseFloat(balanceData.balances.find(b => b.asset === 'BTC')?.free || 0);\nconst eurBalance = parseFloat(balanceData.balances.find(b => b.asset === 'EUR')?.free || 0);\n\n// Debug log for troubleshooting\nconsole.log('🚀 OPTIMIZED Bull Market Analysis:', {\n  marketRegime,\n  btc7DayReturn: btc7DayReturn.toFixed(2) + '%',\n  btc30DayReturn: btc30DayReturn.toFixed(2) + '%',\n  priceVsMA20: (btcPrice / ma20 * 100).toFixed(2) + '%',\n  priceVsMA50: (btcPrice / ma50 * 100).toFixed(2) + '%',\n  priceVsMA200: (btcPrice / ma200 * 100).toFixed(2) + '%',\n  pullbackFromATH: pullbackFromATH.toFixed(2) + '%',\n  fearGreedIndex,\n  fearGreedValue\n});\n\nconst totalValue = (btcBalance * btcPrice) + eurBalance;\nconst btcAllocation = (btcBalance * btcPrice) / totalValue;\nconst satellitePool = totalValue * OPTIMIZED_RISK_CONFIG.PORTFOLIO.SATELLITE_POOL_PERCENTAGE;\n\n// ENHANCED: Optimized DCA Logic with Trend-Aware Profit Taking\nlet action = 'HOLD';\nlet tradePercentage = 0;\nlet tradeSizeEUR = 0;\nlet notes = '';\n\n// Determine action based on Fear & Greed Index using OPTIMIZED config\nconst rules = OPTIMIZED_RISK_CONFIG.OPTIMIZED_FEAR_GREED_RULES;\n\nif (fearGreedIndex >= rules.EXTREME_FEAR.RANGE[0] && fearGreedIndex <= rules.EXTREME_FEAR.RANGE[1]) {\n  action = 'BUY';\n  tradePercentage = rules.EXTREME_FEAR.PERCENTAGE;\n  tradeSizeEUR = satellitePool * (tradePercentage / 100);\n  notes = rules.EXTREME_FEAR.DESCRIPTION;\n} else if (fearGreedIndex >= rules.FEAR.RANGE[0] && fearGreedIndex <= rules.FEAR.RANGE[1]) {\n  action = 'BUY';\n  tradePercentage = rules.FEAR.PERCENTAGE;\n  tradeSizeEUR = satellitePool * (tradePercentage / 100);\n  notes = rules.FEAR.DESCRIPTION;\n} else if (fearGreedIndex >= rules.NEUTRAL.RANGE[0] && fearGreedIndex <= rules.NEUTRAL.RANGE[1]) {\n  // Neutral - DCA if below MA20 (unchanged)\n  if (btcPrice < ma20) {\n    action = 'BUY';\n    tradePercentage = rules.NEUTRAL.PERCENTAGE;\n    tradeSizeEUR = satellitePool * (tradePercentage / 100);\n    notes = rules.NEUTRAL.DESCRIPTION;\n  } else {\n    action = 'HOLD';\n    notes = 'Neutral - Hold (Price above MA20)';\n  }\n} else if (fearGreedIndex >= rules.GREED.RANGE[0] && fearGreedIndex <= rules.GREED.RANGE[1]) {\n  // NEW: TREND-AWARE SELLING for Greed\n  const trendAllowsSelling = evaluateTrendFilter('WEAK_TREND', btcPrice, ma20, ma50, btc7DayReturn, btc30DayReturn);\n  \n  if (trendAllowsSelling) {\n    action = 'SELL';\n    tradePercentage = rules.GREED.PERCENTAGE;\n    tradeSizeEUR = satellitePool * (tradePercentage / 100);\n    notes = rules.GREED.DESCRIPTION + ' + Trend Confirmation';\n  } else {\n    action = 'HOLD';\n    notes = 'Greed but Strong Trend - Hold Position 🚀';\n  }\n} else if (fearGreedIndex >= rules.HIGH_GREED.RANGE[0] && fearGreedIndex <= rules.HIGH_GREED.RANGE[1]) {\n  // NEW: TREND-AWARE SELLING for High Greed\n  const trendAllowsSelling = evaluateTrendFilter('STRONG_WEAKNESS', btcPrice, ma20, ma50, btc7DayReturn, btc30DayReturn);\n  \n  if (trendAllowsSelling) {\n    action = 'SELL';\n    tradePercentage = rules.HIGH_GREED.PERCENTAGE;\n    tradeSizeEUR = satellitePool * (tradePercentage / 100);\n    notes = rules.HIGH_GREED.DESCRIPTION + ' + Strong Weakness Confirmed';\n  } else {\n    action = 'HOLD';\n    notes = 'High Greed but Trend Continues - Hold Position 🚀';\n  }\n} else if (fearGreedIndex >= rules.EXTREME_GREED.RANGE[0] && fearGreedIndex <= rules.EXTREME_GREED.RANGE[1]) {\n  // NEW: TREND-AWARE SELLING for Extreme Greed\n  const trendAllowsSelling = evaluateTrendFilter('CONFIRMED_REVERSAL', btcPrice, ma20, ma50, btc7DayReturn, btc30DayReturn);\n  \n  if (trendAllowsSelling) {\n    action = 'SELL';\n    tradePercentage = rules.EXTREME_GREED.PERCENTAGE;\n    tradeSizeEUR = satellitePool * (tradePercentage / 100);\n    notes = rules.EXTREME_GREED.DESCRIPTION + ' + Confirmed Reversal';\n  } else {\n    action = 'HOLD';\n    notes = 'Extreme Greed but Trend Strong - Hold Position 🚀';\n  }\n}\n\n// Risk Management Checks (unchanged)\nconst portfolioChange7d = $workflow.static?.data?.portfolioValue7dAgo ? \n  ((totalValue - $workflow.static?.data?.portfolioValue7dAgo) / $workflow.static?.data?.portfolioValue7dAgo) : 0;\n\nconst btcChange24h = $workflow.static?.data?.btcPrice24hAgo ? \n  ((btcPrice - $workflow.static?.data?.btcPrice24hAgo) / $workflow.static?.data?.btcPrice24hAgo) : 0;\n\n// Circuit Breaker Logic using config\nif (portfolioChange7d < OPTIMIZED_RISK_CONFIG.CIRCUIT_BREAKERS.MAX_PORTFOLIO_DECLINE_7D) {\n  action = 'HOLD';\n  notes += ' - Circuit Breaker: Portfolio down >20% in 7 days';\n}\n\nif (btcChange24h < OPTIMIZED_RISK_CONFIG.CIRCUIT_BREAKERS.MAX_BTC_DECLINE_24H) {\n  action = 'HOLD';\n  notes += ' - Circuit Breaker: BTC down >10% in 24h';\n}\n\n// Minimum Balance Checks using config (updated for EUR)\nif (action === 'BUY' && eurBalance < Math.max(OPTIMIZED_RISK_CONFIG.DCA.MIN_EUR_BALANCE, tradeSizeEUR)) {\n  action = 'HOLD';\n  notes += ' - Insufficient EUR balance';\n}\n\nif (action === 'SELL' && btcBalance < OPTIMIZED_RISK_CONFIG.DCA.MIN_BTC_BALANCE) {\n  action = 'HOLD';\n  notes += ' - Insufficient BTC balance';\n}\n\n// Calculate trade size in BTC for sells\nconst tradeSizeBTC = action === 'SELL' ? tradeSizeEUR / btcPrice : 0;\n\n// Prepare output (updated for EUR)\nconst result = {\n  fearGreedIndex,\n  fearGreedValue,\n  btcPrice,\n  ma20,\n  ma50,  // NEW\n  ma200, // NEW\n  marketRegime, // NEW\n  btc7DayReturn, // NEW\n  btc30DayReturn, // NEW\n  pullbackFromATH, // NEW\n  btcBalance,\n  eurBalance,\n  totalValue,\n  btcAllocation: btcAllocation * 100,\n  satellitePool,\n  action,\n  tradePercentage,\n  tradeSizeEUR,\n  tradeSizeBTC,\n  notes,\n  timestamp: new Date().toISOString(),\n  portfolioChange7d: portfolioChange7d * 100,\n  btcChange24h: btcChange24h * 100,\n  optimizationVersion: '2.0' // NEW: Version tracking\n};\n\n// ENHANCED: Update static data for trend analysis\nif (!$workflow.static) {\n  $workflow.static = {};\n}\nif (!$workflow.static?.data) {\n  $workflow.static = {data: {}}\n}\n\n$workflow.static = {\n  data: {\n    btcPrice24hAgo: btcPrice,\n    btcPrice7DaysAgo: $workflow.static?.data?.btcPrice24hAgo || btcPrice, // Shift the history\n    btcPrice30DaysAgo: $workflow.static?.data?.btcPrice7DaysAgo || btcPrice, // Shift the history\n    portfolioValue7dAgo: totalValue,\n    allTimeHigh: currentATH, // NEW: Track ATH\n    lastMarketRegime: marketRegime, // NEW: Track regime changes\n    consecutiveBullDays: marketRegime === 'BULL_MARKET' ? \n      ($workflow.static?.data?.consecutiveBullDays || 0) + 1 : 0, // NEW: Bull day counter\n    lastOptimizationUpdate: new Date().toISOString() // NEW: Track updates\n  }\n};\n\nconsole.log('✅ Optimized DCA Logic Complete - Action:', action, '| Market Regime:', marketRegime);\n\nreturn [{ json: result }];"
      },
      "id": "2bbc91fc-8f38-48f9-9ccf-90ef12c59fa9",
      "name": "Optimized DCA Logic Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        -416
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "notEqual",
              "value2": "HOLD"
            }
          ]
        }
      },
      "id": "cf37befe-27ae-4e15-bff0-6f686be72a73",
      "name": "Should Execute Trade?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        128,
        -416
      ]
    },
    {
      "parameters": {
        "jsCode": "// Risk Management Configuration for Order Preparation\nconst RISK_CONFIG = {\n  DCA: {\n    SLIPPAGE_TOLERANCE: 0.01,        // 1% maximum slippage\n  }\n};\n\n// Generate Binance Order Parameters\nconst data = $json;\nconst btcPrice = data.btcPrice;\n\n// Calculate limit price with configured slippage tolerance\nconst slippageTolerance = RISK_CONFIG.DCA.SLIPPAGE_TOLERANCE;\nlet limitPrice;\nlet quantity;\nlet side;\n\nif (data.action === 'BUY') {\n  side = 'BUY';\n  limitPrice = btcPrice * (1 + slippageTolerance); // Buy slightly above market\n  quantity = (data.tradeSizeEUR / limitPrice).toFixed(8); // Use 8 decimal precision for BTC\n} else if (data.action === 'SELL') {\n  side = 'SELL';\n  limitPrice = btcPrice * (1 - slippageTolerance); // Sell slightly below market\n  quantity = data.tradeSizeBTC.toFixed(8); // Use 8 decimal precision for BTC\n}\n\nconsole.log('🔥 Optimized Order Calculation:', {\n  action: data.action,\n  marketRegime: data.marketRegime,\n  tradeSizeEUR: data.tradeSizeEUR,\n  btcPrice: btcPrice,\n  limitPrice: limitPrice.toFixed(2),\n  calculatedQuantity: quantity,\n  estimatedValue: (parseFloat(quantity) * limitPrice).toFixed(2),\n  optimizationVersion: data.optimizationVersion\n});\n\n// Binance order parameters\nconst orderParams = {\n  symbol: 'BTCEUR',\n  side: side,\n  type: 'LIMIT',\n  timeInForce: 'GTC',\n  quantity: quantity,\n  price: limitPrice.toFixed(2),\n  timestamp: Date.now()\n};\n\n// Generate query string for signature\nconst queryString = Object.keys(orderParams)\n  .map(key => `${key}=${orderParams[key]}`)\n  .join('&');\n\nreturn [{\n  json: {\n    ...data,\n    orderParams,\n    queryString,\n    limitPrice,\n    quantity: parseFloat(quantity)\n  }\n}];"
      },
      "id": "8c413dc1-4952-4811-b2ca-7490f46e1e4c",
      "name": "Prepare Order Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -576
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate HMAC SHA256 signature for order\nconst crypto = require('crypto');\n\n// Check if environment variables are set\nif (!$env.BINANCE_SECRET_KEY) {\n  throw new Error('BINANCE_SECRET_KEY environment variable not set');\n}\n\nconst queryString = $json.queryString;\nconsole.log('Order signature query string:', queryString);\n\nconst signature = crypto.createHmac('sha256', $env.BINANCE_SECRET_KEY)\n  .update(queryString)\n  .digest('hex');\n\nconsole.log('Generated order signature:', signature);\n\nreturn [{\n  json: {\n    ...$json,\n    signature\n  }\n}];"
      },
      "id": "95d8c065-e833-41cb-bd78-704727bcd6b5",
      "name": "Sign Order",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -576
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.binance.com/api/v3/order",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{$json.orderParams.symbol}}"
            },
            {
              "name": "side",
              "value": "={{$json.orderParams.side}}"
            },
            {
              "name": "type",
              "value": "={{$json.orderParams.type}}"
            },
            {
              "name": "timeInForce",
              "value": "={{$json.orderParams.timeInForce}}"
            },
            {
              "name": "quantity",
              "value": "={{$json.orderParams.quantity}}"
            },
            {
              "name": "price",
              "value": "={{$json.orderParams.price}}"
            },
            {
              "name": "timestamp",
              "value": "={{$json.orderParams.timestamp}}"
            },
            {
              "name": "signature",
              "value": "={{$json.signature}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-MBX-APIKEY",
              "value": "={{$env.BINANCE_API_KEY}}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "02026807-99dc-4411-bbea-088b5a29dbd3",
      "name": "Execute Trade on Binance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        864,
        -576
      ]
    },
    {
      "parameters": {
        "jsCode": "// OPTIMIZED Risk Management Configuration for Bull Market-Aware Rebalancing\nconst OPTIMIZED_RISK_CONFIG = {\n  PORTFOLIO: {\n    BASE_BTC_ALLOCATION: 0.75,       // 75% BTC base target\n    REBALANCE_BAND: 0.05,            // ±5% rebalancing threshold\n    // ENHANCED: Dynamic allocation based on Fear & Greed Index AND Market Regime\n    DYNAMIC_FEAR_GREED_TARGETS: {\n      EXTREME_FEAR: { \n        RANGE: [0, 20], \n        TARGET: 0.85,\n        BULL_MARKET_TARGET: 0.90,  // NEW: Higher in bull markets\n        DESCRIPTION: 'Extreme Fear - Accumulate Aggressively' \n      },\n      FEAR: { \n        RANGE: [21, 30], \n        TARGET: 0.80,\n        BULL_MARKET_TARGET: 0.85,  // NEW: Higher in bull markets\n        DESCRIPTION: 'Fear - Accumulate More' \n      },\n      NEUTRAL: { \n        RANGE: [31, 60], \n        TARGET: 0.75,\n        BULL_MARKET_TARGET: 0.80,  // NEW: Higher in bull markets\n        DESCRIPTION: 'Neutral - Base Allocation' \n      },\n      GREED: { \n        RANGE: [61, 70], \n        TARGET: 0.70,\n        BULL_MARKET_TARGET: 0.75,  // NEW: Less conservative in bull markets\n        DESCRIPTION: 'Greed - Take Some Profits' \n      },\n      HIGH_GREED: { \n        RANGE: [71, 80], \n        TARGET: 0.65,\n        BULL_MARKET_TARGET: 0.70,  // NEW: Less conservative in bull markets\n        DESCRIPTION: 'High Greed - Take More Profits' \n      },\n      EXTREME_GREED: { \n        RANGE: [81, 100], \n        TARGET: 0.60,\n        BULL_MARKET_TARGET: 0.75,  // NEW: Much higher minimum in bull markets\n        DESCRIPTION: 'Extreme Greed - Maximum Profit Taking' \n      }\n    }\n  },\n  DCA: {\n    MIN_BTC_BALANCE: 0.01,           // Minimum BTC to maintain\n    MIN_EUR_BALANCE: 5,              // Minimum EUR to maintain\n  },\n  // NEW: Market Regime Detection (duplicate for rebalancing logic)\n  MARKET_REGIME: {\n    BULL_MARKET_THRESHOLDS: {\n      PRICE_ABOVE_MA50: true,\n      MA50_ABOVE_MA200: true,\n      THIRTY_DAY_RETURN: 20\n    },\n    BEAR_MARKET_THRESHOLDS: {\n      PRICE_BELOW_MA50: true,\n      MA50_BELOW_MA200: true,\n      THIRTY_DAY_RETURN: -20\n    }\n  }\n};\n\n// NEW: Market Regime Detection Function (for rebalancing)\nfunction detectMarketRegime(btcPrice, ma50, ma200, btc30DayReturn) {\n  const config = OPTIMIZED_RISK_CONFIG.MARKET_REGIME;\n  \n  if (btcPrice > ma50 && \n      ma50 > ma200 && \n      btc30DayReturn > config.BULL_MARKET_THRESHOLDS.THIRTY_DAY_RETURN) {\n    return 'BULL_MARKET';\n  } else if (btcPrice < ma50 && \n             ma50 < ma200 && \n             btc30DayReturn < config.BEAR_MARKET_THRESHOLDS.THIRTY_DAY_RETURN) {\n    return 'BEAR_MARKET';\n  } else {\n    return 'NEUTRAL';\n  }\n}\n\n// NEW: Enhanced Moving Average Calculation\nfunction calculateMA(candleData, period) {\n  const closes = candleData.slice(-period).map(candle => parseFloat(candle[4]));\n  return closes.reduce((sum, close) => sum + close, 0) / closes.length;\n}\n\n// ENHANCED Monthly Rebalancing Logic with Bull Market Optimization\n// Check if today is the 1st day of the month - only run rebalancing then\nconst today = new Date();\nconst isFirstDayOfMonth = today.getDate() === 1;\n\nif (!isFirstDayOfMonth) {\n  // Skip rebalancing if not the first day of the month\n  console.log('Skipping rebalancing - not the first day of the month (Day', today.getDate(), ')');\n  return [{\n    json: {\n      needsRebalancing: false,\n      action: 'SKIP',\n      notes: `Rebalancing skipped - not first day of month (Day ${today.getDate()})`,\n      timestamp: new Date().toISOString(),\n      optimizationVersion: '2.0'\n    }\n  }];\n}\n\nconsole.log('🗓️ First day of month - proceeding with OPTIMIZED monthly rebalancing');\n\nconst fearGreedData = $node[\"Get Fear & Greed Index\"].json;\nconst balanceData = $node[\"Get Binance Account Data\"].json;\nconst btcPriceData = $node[\"Get BTC Price\"].json;\nconst ma50Data = $node[\"Get BTC 50-Day MA\"].json;  // NEW\nconst ma200Data = $node[\"Get BTC 200-Day MA\"].json;  // NEW\n\n// Parse Fear & Greed Index\nconst fearGreedIndex = parseInt(fearGreedData.data[0].value);\nconst fearGreedValue = fearGreedData.data[0].value_classification;\n\n// Parse data\nconst btcPrice = parseFloat(btcPriceData.price);\nconst btcBalance = parseFloat(balanceData.balances.find(b => b.asset === 'BTC')?.free || 0);\nconst eurBalance = parseFloat(balanceData.balances.find(b => b.asset === 'EUR')?.free || 0);\n\n// NEW: Calculate moving averages for market regime\nconst ma50 = calculateMA(ma50Data, 50);\nconst ma200 = calculateMA(ma200Data, 200);\n\n// NEW: Calculate 30-day return for market regime\nconst btcPrice30DaysAgo = $workflow.static?.data?.btcPrice30DaysAgo || btcPrice;\nconst btc30DayReturn = ((btcPrice - btcPrice30DaysAgo) / btcPrice30DaysAgo) * 100;\n\n// NEW: Detect market regime for rebalancing\nconst marketRegime = detectMarketRegime(btcPrice, ma50, ma200, btc30DayReturn);\n\n// Debug log for rebalancing\nconsole.log('🚀 OPTIMIZED Monthly Rebalancing Analysis:', {\n  fearGreedIndex,\n  fearGreedValue,\n  marketRegime,\n  btc30DayReturn: btc30DayReturn.toFixed(2) + '%',\n  btcPrice,\n  ma50: ma50.toFixed(2),\n  ma200: ma200.toFixed(2)\n});\n\nconst totalValue = (btcBalance * btcPrice) + eurBalance;\nconst currentBtcAllocation = (btcBalance * btcPrice) / totalValue;\n\n// ENHANCED: Determine target allocation based on Fear & Greed Index AND Market Regime\nlet targetBtcAllocation = OPTIMIZED_RISK_CONFIG.PORTFOLIO.BASE_BTC_ALLOCATION;\nlet fearGreedStrategy = 'Neutral - Base Allocation';\n\n// Find the appropriate target based on fear & greed index AND market regime\nfor (const [key, config] of Object.entries(OPTIMIZED_RISK_CONFIG.PORTFOLIO.DYNAMIC_FEAR_GREED_TARGETS)) {\n  if (fearGreedIndex >= config.RANGE[0] && fearGreedIndex <= config.RANGE[1]) {\n    // NEW: Select target based on market regime\n    targetBtcAllocation = marketRegime === 'BULL_MARKET' \n      ? config.BULL_MARKET_TARGET \n      : config.TARGET;\n    fearGreedStrategy = config.DESCRIPTION + (marketRegime === 'BULL_MARKET' ? ' (Bull Market Enhanced)' : '');\n    break;\n  }\n}\n\nconst rebalanceBand = OPTIMIZED_RISK_CONFIG.PORTFOLIO.REBALANCE_BAND;\n\nlet needsRebalancing = false;\nlet action = 'HOLD';\nlet tradeAmount = 0;\nlet notes = `Fear & Greed: ${fearGreedIndex} (${fearGreedValue}) - ${fearGreedStrategy} | Market Regime: ${marketRegime}`;\n\n// Check if rebalancing is needed based on DYNAMIC target\nif (currentBtcAllocation > targetBtcAllocation + rebalanceBand) {\n  // Too much BTC, sell some\n  needsRebalancing = true;\n  action = 'SELL';\n  const excessBtcValue = totalValue * (currentBtcAllocation - targetBtcAllocation);\n  tradeAmount = excessBtcValue / btcPrice;\n  notes += ` | Rebalancing: BTC allocation too high (${(currentBtcAllocation * 100).toFixed(1)}% vs ${(targetBtcAllocation * 100).toFixed(1)}% target)`;\n} else if (currentBtcAllocation < targetBtcAllocation - rebalanceBand) {\n  // Too little BTC, buy some\n  needsRebalancing = true;\n  action = 'BUY';\n  const neededBtcValue = totalValue * (targetBtcAllocation - currentBtcAllocation);\n  tradeAmount = neededBtcValue; // EUR amount for buying\n  notes += ` | Rebalancing: BTC allocation too low (${(currentBtcAllocation * 100).toFixed(1)}% vs ${(targetBtcAllocation * 100).toFixed(1)}% target)`;\n} else {\n  notes += ` | Portfolio within target range (${(currentBtcAllocation * 100).toFixed(1)}% vs ${(targetBtcAllocation * 100).toFixed(1)}% target)`;\n}\n\n// Safety checks using config\nif (action === 'SELL' && btcBalance < OPTIMIZED_RISK_CONFIG.DCA.MIN_BTC_BALANCE) {\n  needsRebalancing = false;\n  action = 'HOLD';\n  notes += ' - Insufficient BTC for rebalancing';\n}\n\nif (action === 'BUY' && eurBalance < OPTIMIZED_RISK_CONFIG.DCA.MIN_EUR_BALANCE) {\n  needsRebalancing = false;\n  action = 'HOLD';\n  notes += ' - Insufficient EUR for rebalancing';\n}\n\nconsole.log('✅ Optimized Rebalancing Complete - Action:', action, '| Target:', (targetBtcAllocation * 100).toFixed(1) + '%');\n\nreturn [{\n  json: {\n    needsRebalancing,\n    action,\n    tradeAmount,\n    currentBtcAllocation: currentBtcAllocation * 100,\n    targetBtcAllocation: targetBtcAllocation * 100,\n    fearGreedIndex,\n    fearGreedValue,\n    fearGreedStrategy,\n    marketRegime,  // NEW\n    btc30DayReturn,  // NEW\n    btcPrice,\n    btcBalance,\n    eurBalance,\n    totalValue,\n    notes,\n    timestamp: new Date().toISOString(),\n    optimizationVersion: '2.0'  // NEW: Version tracking\n  }\n}];"
      },
      "id": "c557c745-0db6-4456-b124-ac3ea0b5898f",
      "name": "Optimized Rebalancing Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "notEqual",
              "value2": "SKIP"
            }
          ]
        }
      },
      "id": "255620b2-691a-44fe-8ace-890b61e703ec",
      "name": "Should Rebalance?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        128,
        112
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "mode": "list",
          "value": "1_ezPrObjvCajRD_oB3jJWx_xVTOXgTq-B5Kd_jAnrug"
        },
        "sheetName": {
          "mode": "list",
          "value": "0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{($json.originalDCAData?.timestamp || $json.timestamp || $node[\"Optimized DCA Logic Engine\"]?.json?.timestamp || new Date().toISOString()).split('T')[0]}}",
            "Time": "={{($json.originalDCAData?.timestamp || $json.timestamp || $node[\"Optimized DCA Logic Engine\"]?.json?.timestamp || new Date().toISOString()).split('T')[1]}}",
            "Fear_Greed_Index": "={{$json.originalDCAData?.fearGreedIndex || $json.fearGreedIndex || $node[\"Optimized DCA Logic Engine\"]?.json?.fearGreedIndex || ''}}",
            "Market_Regime": "={{$json.originalDCAData?.marketRegime || $json.marketRegime || $node[\"Optimized DCA Logic Engine\"]?.json?.marketRegime || ''}}",
            "Action": "={{$json.originalDCAData?.action || $json.action || $node[\"Optimized DCA Logic Engine\"]?.json?.action || ''}}",
            "Trade_Size_Percent": "={{$json.originalDCAData?.tradePercentage || $json.tradePercentage || $node[\"Optimized DCA Logic Engine\"]?.json?.tradePercentage || 0}}",
            "Trade_Size_EUR": "={{$json.originalDCAData?.tradeSizeEUR || $json.tradeSizeEUR || $node[\"Optimized DCA Logic Engine\"]?.json?.tradeSizeEUR || 0}}",
            "Trade_Size_BTC": "={{$json.originalDCAData?.tradeSizeBTC || $json.tradeSizeBTC || $node[\"Optimized DCA Logic Engine\"]?.json?.tradeSizeBTC || 0}}",
            "BTC_Price": "={{$json.originalDCAData?.btcPrice || $json.btcPrice || $node[\"Optimized DCA Logic Engine\"]?.json?.btcPrice || 0}}",
            "BTC_Allocation_Percent": "={{$json.originalDCAData?.btcAllocation || $json.btcAllocation || $node[\"Optimized DCA Logic Engine\"]?.json?.btcAllocation || 0}}",
            "Total_Portfolio_Value": "={{$json.originalDCAData?.totalValue || $json.totalValue || $node[\"Optimized DCA Logic Engine\"]?.json?.totalValue || 0}}",
            "Order_ID": "={{$json.orderId || ''}}",
            "Executed_Qty": "={{$json.executedQty || ''}}",
            "Trade_Status": "={{$json.isTradeResult ? 'EXECUTED' : ($json.error ? 'FAILED' : ($json.action === 'HOLD' ? 'HOLD' : 'UNKNOWN'))}}",
            "Error_Message": "={{$json.error?.message || ''}}",
            "Notes": "={{$json.originalDCAData?.notes || $json.notes || $node[\"Optimized DCA Logic Engine\"]?.json?.notes || ''}}",
            "Optimization_Version": "={{$json.originalDCAData?.optimizationVersion || $json.optimizationVersion || $node[\"Optimized DCA Logic Engine\"]?.json?.optimizationVersion || '2.0'}}"
          }
        },
        "options": {}
      },
      "id": "5aeafebf-9970-4410-80a9-b67d2e65ef3d",
      "name": "Log to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1344,
        -112
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XIvarExQRnyd0Aud",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "mode": "list",
          "value": "1_ezPrObjvCajRD_oB3jJWx_xVTOXgTq-B5Kd_jAnrug"
        },
        "sheetName": {
          "mode": "list",
          "value": "352730297"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{$json.timestamp.split('T')[0]}}",
            "Time": "={{$json.timestamp.split('T')[1]}}",
            "Fear_Greed_Index": "={{$json.fearGreedIndex || ''}}",
            "Fear_Greed_Value": "={{$json.fearGreedValue || ''}}",
            "Fear_Greed_Strategy": "={{$json.fearGreedStrategy || ''}}",
            "Market_Regime": "={{$json.marketRegime || ''}}",
            "Action": "={{$json.action || ''}}",
            "Trade_Amount": "={{$json.tradeAmount || 0}}",
            "BTC_Price": "={{$json.btcPrice || 0}}",
            "Current_BTC_Allocation": "={{$json.currentBtcAllocation || 0}}",
            "Target_BTC_Allocation": "={{$json.targetBtcAllocation || 0}}",
            "Total_Portfolio_Value": "={{$json.totalValue || 0}}",
            "Notes": "={{$json.notes || ''}}",
            "Optimization_Version": "={{$json.optimizationVersion || '2.0'}}"
          }
        },
        "options": {}
      },
      "id": "d96ea036-3a62-486c-8e17-5af4cb090038",
      "name": "Log Rebalancing to Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        368,
        320
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XIvarExQRnyd0Aud",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format OPTIMIZED DCA Alert Message with Bull Market Intelligence\nconst data = $json;\n\n// Debug log to see what we're receiving\nconsole.log('🔍 Debug - Raw optimized data received:', JSON.stringify(data, null, 2));\n\n// Check if this is trade execution result or DCA logic result\nconst isTradeResult = data.orderId || data.executedQty; // Binance API response fields\nconst originalData = isTradeResult ? $node[\"Optimized DCA Logic Engine\"].json : data;\n\n// Format numbers with proper decimals\nconst formatNumber = (num, decimals = 2) => {\n  if (num === null || num === undefined || num === '' || isNaN(num)) return 'None';\n  return parseFloat(num).toFixed(decimals);\n};\n\nconst formatPercent = (num, decimals = 1) => {\n  if (num === null || num === undefined || num === '' || isNaN(num)) return 'None';\n  return parseFloat(num).toFixed(decimals);\n};\n\n// Get market regime emoji\nconst getMarketRegimeEmoji = (regime) => {\n  switch(regime) {\n    case 'BULL_MARKET': return '🚀';\n    case 'BEAR_MARKET': return '🐻';\n    case 'NEUTRAL': return '⚖️';\n    default: return '📊';\n  }\n};\n\n// Create formatted message based on context\nlet message;\n\nif (isTradeResult) {\n  // This is a successful trade execution result\n  const regimeEmoji = getMarketRegimeEmoji(originalData.marketRegime);\n  message = `✅ *OPTIMIZED Trade Executed Successfully*\n\n📊 Fear & Greed: ${originalData.fearGreedIndex || 'None'} (${originalData.fearGreedValue || 'None'})\n${regimeEmoji} Market Regime: ${originalData.marketRegime || 'None'}\n💰 BTC Price: €${formatNumber(originalData.btcPrice)}\n🎯 Action: ${originalData.action || 'None'}\n📈 Trade Size: ${formatPercent(originalData.tradePercentage)}% (€${formatNumber(originalData.tradeSizeEUR)})\n🏦 Portfolio: ${formatPercent(originalData.btcAllocation)}% BTC\n📋 Order ID: ${data.orderId || 'None'}\n✅ Executed Qty: ${data.executedQty || 'None'}\n🔧 Version: ${originalData.optimizationVersion || '2.0'}\n📝 Notes: ${originalData.notes || 'None'}\n⏰ Time: ${originalData.timestamp || new Date().toISOString()}`;\n} else {\n  // This is a DCA decision (could be HOLD or trade intent)\n  const statusEmoji = data.action === 'HOLD' ? '⏸️' : '🔄';\n  const statusText = data.action === 'HOLD' ? 'No Trade Executed - OPTIMIZED' : 'Trade Recommended - OPTIMIZED';\n  const regimeEmoji = getMarketRegimeEmoji(data.marketRegime);\n  \n  message = `${statusEmoji} *${statusText}*\n\n📊 Fear & Greed: ${data.fearGreedIndex || 'None'} (${data.fearGreedValue || 'None'})\n${regimeEmoji} Market Regime: ${data.marketRegime || 'None'}\n💰 BTC Price: €${formatNumber(data.btcPrice)}\n📊 7D Return: ${formatPercent(data.btc7DayReturn)}%\n📈 30D Return: ${formatPercent(data.btc30DayReturn)}%\n🎯 Action: ${data.action || 'None'}\n📈 Trade Size: ${formatPercent(data.tradePercentage)}% (€${formatNumber(data.tradeSizeEUR)})\n🏦 Portfolio: ${formatPercent(data.btcAllocation)}% BTC\n🔧 Version: ${data.optimizationVersion || '2.0'}\n📝 Notes: ${data.notes || 'None'}\n⏰ Time: ${data.timestamp || new Date().toISOString()}`;\n}\n\nreturn [{\n  json: {\n    ...data,\n    formattedMessage: message,\n    isTradeResult: isTradeResult,\n    originalDCAData: originalData\n  }\n}];"
      },
      "id": "d9ce3ae2-889a-413d-91b4-3f7c53e91f17",
      "name": "Format Optimized DCA Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -384
      ]
    },
    {
      "parameters": {
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "={{$json.formattedMessage}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "e402df3d-4ee1-4e22-8fc4-9492e6076d31",
      "name": "Send Telegram Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1664,
        -384
      ],
      "webhookId": "5115fdbc-adc2-4ad1-b4f4-34ae2818f018",
      "credentials": {
        "telegramApi": {
          "id": "pXfRShLDDrmsJMp9",
          "name": "CryptBrorBot Telegram API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format OPTIMIZED Rebalance Alert Message with Bull Market Intelligence\nconst data = $json;\n\n// Format numbers with proper decimals\nconst formatNumber = (num, decimals = 2) => {\n  if (num === null || num === undefined || num === '' || isNaN(num)) return 'None';\n  return parseFloat(num).toFixed(decimals);\n};\n\nconst formatPercent = (num, decimals = 1) => {\n  if (num === null || num === undefined || num === '' || isNaN(num)) return 'None';\n  return parseFloat(num).toFixed(decimals);\n};\n\n// Get market regime emoji\nconst getMarketRegimeEmoji = (regime) => {\n  switch(regime) {\n    case 'BULL_MARKET': return '🚀';\n    case 'BEAR_MARKET': return '🐻';\n    case 'NEUTRAL': return '⚖️';\n    default: return '📊';\n  }\n};\n\nconst regimeEmoji = getMarketRegimeEmoji(data.marketRegime);\n\n// Create formatted message\nconst message = `⚖️ *OPTIMIZED Monthly Portfolio Rebalancing*\n\n📊 *Fear & Greed:* ${data.fearGreedIndex || 'None'} (${data.fearGreedValue || 'None'})\n${regimeEmoji} *Market Regime:* ${data.marketRegime || 'None'}\n📈 *30D Return:* ${formatPercent(data.btc30DayReturn)}%\n🧠 *Strategy:* ${data.fearGreedStrategy || 'None'}\n🎯 *Action:* ${data.action || 'None'}\n💰 *Trade Amount:* ${formatNumber(data.tradeAmount)}\n📊 *Current BTC Allocation:* ${formatPercent(data.currentBtcAllocation)}%\n🎯 *Target BTC Allocation:* ${formatPercent(data.targetBtcAllocation)}%\n💼 *Portfolio Value:* €${formatNumber(data.totalValue)}\n🔧 *Version:* ${data.optimizationVersion || '2.0'}\n📝 *Notes:* ${data.notes || 'None'}\n⏰ *Time:* ${data.timestamp || new Date().toISOString()}`;\n\nreturn [{\n  json: {\n    ...data,\n    formattedMessage: message\n  }\n}];"
      },
      "id": "dc97bdc4-cd9e-45a5-800a-23cbe3e4ac61",
      "name": "Format Optimized Rebalance Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        96
      ]
    },
    {
      "parameters": {
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "={{$json.formattedMessage}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "e0d592f9-0867-4de6-b5a4-8fe31fac1007",
      "name": "Send Rebalance Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        624,
        96
      ],
      "webhookId": "e7688a2a-4801-4689-930e-bd73723afe3b",
      "credentials": {
        "telegramApi": {
          "id": "pXfRShLDDrmsJMp9",
          "name": "CryptBrorBot Telegram API"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "❌ *OPTIMIZED Trade Execution Failed*\n\n🚨 *Error:* ={{$json.error?.message || 'Unknown error'}}\n📊 *Attempted Action:* ={{$node[\"Optimized DCA Logic Engine\"].json.action || 'None'}}\n🚀 *Market Regime:* ={{$node[\"Optimized DCA Logic Engine\"].json.marketRegime || 'None'}}\n💰 *Trade Size:* ={{$node[\"Optimized DCA Logic Engine\"].json.tradePercentage || 0}}% (€{{$node[\"Optimized DCA Logic Engine\"].json.tradeSizeEUR || 0}} EUR)\n📈 *BTC Price:* €{{$node[\"Optimized DCA Logic Engine\"].json.btcPrice || 0}}\n🔧 *Version:* {{$node[\"Optimized DCA Logic Engine\"].json.optimizationVersion || '2.0'}}\n⏰ *Time:* ={{new Date().toISOString()}}\n\n🔧 *Please check the OPTIMIZED system immediately!*",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "13433af2-1c36-43a3-875c-340063dd6b4f",
      "name": "Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1104,
        112
      ],
      "webhookId": "9e21d5e9-5ad4-4479-9219-fd4e9332eee4",
      "credentials": {
        "telegramApi": {
          "id": "pXfRShLDDrmsJMp9",
          "name": "CryptBrorBot Telegram API"
        }
      }
    }
  ],
  "connections": {
    "Daily DCA Trigger": {
      "main": [
        [
          {
            "node": "Get Fear & Greed Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monthly Rebalance Trigger": {
      "main": [
        [
          {
            "node": "Get Fear & Greed Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Fear & Greed Index": {
      "main": [
        [
          {
            "node": "Get BTC Price",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BTC Price": {
      "main": [
        [
          {
            "node": "Get BTC 20-Day MA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BTC 20-Day MA": {
      "main": [
        [
          {
            "node": "Get BTC 50-Day MA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BTC 50-Day MA": {
      "main": [
        [
          {
            "node": "Get BTC 200-Day MA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BTC 200-Day MA": {
      "main": [
        [
          {
            "node": "Get Binance Account Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Binance Account Data": {
      "main": [
        [
          {
            "node": "Optimized DCA Logic Engine",
            "type": "main",
            "index": 0
          },
          {
            "node": "Optimized Rebalancing Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimized DCA Logic Engine": {
      "main": [
        [
          {
            "node": "Should Execute Trade?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Execute Trade?": {
      "main": [
        [
          {
            "node": "Prepare Order Parameters",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format Optimized DCA Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Order Parameters": {
      "main": [
        [
          {
            "node": "Sign Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sign Order": {
      "main": [
        [
          {
            "node": "Execute Trade on Binance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Trade on Binance": {
      "main": [
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Format Optimized DCA Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimized Rebalancing Logic": {
      "main": [
        [
          {
            "node": "Should Rebalance?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Rebalance?": {
      "main": [
        [
          {
            "node": "Format Optimized Rebalance Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Rebalancing to Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Optimized DCA Message": {
      "main": [
        [
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Optimized Rebalance Message": {
      "main": [
        [
          {
            "node": "Send Rebalance Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notification": {
      "main": [
        [
          {
            "node": "Log to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bfc0bfbd070b9339924201403312a0e7cc187166f8d381ae7b72352abf334658"
  }
}